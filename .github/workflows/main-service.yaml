name: main-service

on:
  workflow_dispatch:
  pull_request:
    branches:
    - main
    paths:
      - 'src/main-service/**'
      - '.github/workflows/main-service.yaml'

  push:
    branches:
    - main
    paths:
        - 'src/main-service/**'
        - '.github/workflows/main-service.yaml'

env:
  IMAGE_TAG: ${{ github.run_id }}.${{ github.run_number }}
  SERVICE_NAME: mian-service

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    
    - uses: ./.github/workflows/composite/build-dotnet
      with:
        workdir: 'src/main-service/'
        project: 'main-service.csproj'
        
  docker-push:
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' }}
    needs: build-test

    outputs:
        image-tag: 'ghcr.io/tasb/hello-service/${{ env.SERVICE_NAME }}:${{ env.IMAGE_TAG }}'

    steps:
    - uses: actions/checkout@v2
    - uses: ./.github/workflows/composite/docker-push
      with:
        context: 'src/main-service/'
        registry: ghcr.io
        registry-username: ${{ github.actor }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
        image-tag: 'ghcr.io/tasb/hello-service/${{ env.SERVICE_NAME }}:${{ env.IMAGE_TAG }}'

  deploy:
    if: github.event_name != 'pull_request'
    environment: 
      name: myenv
    runs-on: ubuntu-latest
    needs: docker-push

    permissions:
      id-token: write
      contents: read
    steps:
      - name: checkout code
        uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::<AWS_ID>:role/github-actions
          aws-region: us-east-1
      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition fargate-node-task-defn --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the AWS ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: nodejs-app-container
          image: ${{ needs.docker-push.outputs.image-tag }}
      - name: Deploy AWS ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: fargate-node-service
          cluster: fargate-node-cluster
          wait-for-service-stability: true
  